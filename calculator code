.model small
.data
    num1 dw ?
    num2 dw ?
    result dw ?
    operator db ?
    msg1 db 'Enter first number: $'
    msg2 db 'Enter operator (+, -, *, /): $'
    msg3 db 'Enter second number: $'
    msg4 db 'Result: $'

.code
main proc
    mov ax, @data
    mov ds, ax

    ; Get first number
    mov ah, 09h
    lea dx, msg1
    int 21h
    mov ah, 01h
    int 21h
    sub al, 30h ; Convert ASCII to numeric
    mov num1, ax ; Use mov to store word value

    ; Get operator
    mov ah, 09h
    lea dx, msg2
    int 21h
    mov ah, 01h
    int 21h
    mov operator, al

    ; Get second number
    mov ah, 09h
    lea dx, msg3
    int 21h
    mov ah, 01h
    int 21h
    sub al, 30h ; Convert ASCII to numeric
    mov num2, ax ; Use mov to store word value

    ; Perform calculation based on operator
    cmp operator, '+'
    je add_numbers
    cmp operator, '-'
    je subtract_numbers
    cmp operator, '*'
    je multiply_numbers
    cmp operator, '/'
    je divide_numbers
    jmp invalid_operator

add_numbers:
    mov ax, num1
    add ax, num2
    mov result, ax
    jmp display_result

subtract_numbers:
    mov ax, num1
    sub ax, num2
    mov result, ax
    jmp display_result

multiply_numbers:
    mov ax, num1
    imul num2
    mov result, ax
    jmp display_result

divide_numbers:
    mov ax, num1
    cwd
    idiv num2
    mov result, ax
    jmp display_result

invalid_operator:
    ; invalid operator here
    jmp exit_program

display_result:
    ; Display the result
    mov ah, 09h
    lea dx, msg4
    int 21h
    mov ax, result
    add ax, 30h ; Convert numeric result to ASCII
    mov dl, al
    int 21h

exit_program:
    ; Exit the program
    mov ah, 4ch
    int 21h

main endp
end main
